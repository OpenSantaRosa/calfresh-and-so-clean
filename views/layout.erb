<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- JQuery -->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <!--[if lt IE 9]>
    <script type="text/javascript" src="js/flashcanvas.js"></script>
    <![endif]-->
    <!-- Bootstrap CSS-->
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">
    <!-- Custom css -->
    <link rel="stylesheet" src="css/custom.css">
    <style>
    #main { max-width: 700px;}
    </style>
  </head>


  <title>Apply for CalFresh</title>

  <!-- jSignature -->
  <script src="js/jSignature.min.js"></script>
  <script>
    $(document).ready(function() {
      $("#signature_area").jSignature()
      // Magic modified from http://paulology.com/signature-capture/
      var $sigdiv = $("#signature_area")
      $('#submit_button').click(function(e) {
        var datapair = $sigdiv.jSignature("getData", "image")
        $("#signature_value_hidden").append("<input type=\"hidden\" name=\"signature\" value=\"" + datapair[1] + "\">")
      });
    })
  </script>


  <body>
    <div class="container-fluid" id="main">
      <%= yield %>
    </div>
  </body>


  <!-- Bootstrap core JavaScript -->
  <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
</html>

  <!-- File compression JS -->

<script>

var textFields = { };
var FD = new FormData();
var XHR = new XMLHttpRequest();
var formURL = '/applications'

$('#primary-form').submit(function(e) {
  serializeTextFields(e);
  appendTextFieldsToFD();
  sendXHR();
  e.preventDefault();
});

function sendXHR() {
  console.log("sendXHR called");
  XHR.open("POST", formURL, true);
  XHR.onload = function(e) {
    if (XHR.status == 200) {
      alert("Uploaded!");
    } else {
      alert("Error " + sendXHR.status + " occurred uploading your file.");
    }
  }
  XHR.send(FD);
  // var responseHeader = XHR.getResponseHeader();
  // console.log(responseHeader);
}

function appendTextFieldsToFD() {
  FD.append("textFields", textFields);
  console.log(FD);
  console.log(textFields);
}


//  This may need to be updated to include both the key and the value

function serializeTextFields(e) {
  $.each($(".form-control").serializeArray(), function() {
    textFields[this.name] = this.value;
  });
  // $(".form-control").each(function() {
  //   textValues.push($(this).val());
  // });
console.log(textFields);
}

if (window.File && window.FileReader && window.FileList && window.Blob) {

    $(".form-upload").change(function(e) {

      var files = e.target.files;
      var docName = e.target.name;

        for(var i = 0; i < files.length; i++) {
          resizeAndUpload(files[i], docName);
        }
    });

} else {
    alert('Friendly warning: it may take a while to upload your files using this browser. (File APIs not fully supported).');
}


function resizeAndUpload(file, docName) {

  console.log(file + docName);
  var reader = new FileReader();
  reader.readAsDataURL(file);

  reader.onloadend = function() {
    console.log("reading operation complete")

    var tempImg = new Image();
    tempImg.src = reader.result;
    tempImg.onload = function () {

      var MAX_WIDTH = 800;
      var MAX_HEIGHT = 600;
      var tempW = tempImg.width;
      var tempH = tempImg.height;
      //  is it landscape? if so...
      if (tempW > tempH) {
        if (tempW > MAX_WIDTH) {
          tempH *= MAX_WIDTH / tempW;
          tempW = MAX_WIDTH;
        }
      } else {
        if (tempH > MAX_HEIGHT) {
          tempW *= MAX_HEIGHT / tempH;
          tempH = MAX_HEIGHT;
        }
      }

      var canvas = document.createElement('canvas');
      canvas.width = tempW;
      canvas.height = tempH;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(this, 0, 0, tempW, tempH);
      var dataURL = canvas.toDataURL("image/jpeg", 0.8);
      var blob = dataURItoBlob(dataURL);

      appendBlobToFD(blob, docName);
    }
  }
}

function dataURItoBlob(dataURI) {
  var byteString = atob(dataURI.split(',')[1]);
  var ab = new ArrayBuffer(byteString.length);
  var ia = new Uint8Array(ab);
  for (var i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }
  return new Blob([ab], { type: 'image/jpeg' });
}

function appendBlobToFD(blob, docName) {
  console.log("append to blob function called");
  var canvasImage = blob;
  FD.append(docName, canvasImage);
  console.log(FD);
  console.log(docName + canvasImage);
}

</script>